import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class WordCounter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String text = "";

        System.out.println("Word Counter");

        while (text.isEmpty()) {
            System.out.print("Enter text or provide a file path: ");
            String input = scanner.nextLine().trim();

            if (input.startsWith("file:")) {
                String filePath = input.substring(5).trim();
                try {
                    text = readFile(filePath);
                } catch (FileNotFoundException e) {
                    System.out.println("File not found. Please provide a valid file path.");
                }
            } else {
                text = input;
            }
        }

        // Split the text into words using space and punctuation as delimiters
        String[] words = text.split("\\s+|\\p{Punct}");

        // Initialize a counter variable to keep track of the number of words
        int wordCount = 0;

        // Initialize a set to store unique words
        Set<String> uniqueWords = new HashSet<>();

        // Initialize a map to store word frequency
        Map<String, Integer> wordFrequency = new HashMap<>();

        // Set of common stop words to be ignored
        Set<String> stopWords = new HashSet<>();
        stopWords.add("the");
        stopWords.add("and");
        stopWords.add("in");
        stopWords.add("of");
        // Add more stop words as needed

        // Iterate through the array of words and count words
        for (String word : words) {
            if (!word.isEmpty()) {
                wordCount++;

                // Check if the word is a stop word or
 if (!stopWords.contains(word.toLowerCase())) {
                    uniqueWords.add(word);
                    wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1);
                }
            }
        }

        System.out.println("Total word count: " + wordCount);
        System.out.println("Total unique words: " + uniqueWords.size());

        // Display word frequency
        System.out.println("\nWord Frequency:");
        for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }

        scanner.close();
    }

    public static String readFile(String filePath) throws FileNotFoundException {
        StringBuilder sb = new StringBuilder();
        File file = new File(filePath);
        Scanner fileScanner = new Scanner(file);

        while (fileScanner.hasNextLine()) {
            sb.append(fileScanner.nextLine()).append("\n");
        }

        fileScanner.close();
        return sb.toString();
    }
}
